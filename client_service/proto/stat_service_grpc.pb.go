// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: stat_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StatService_GetEventsCount_FullMethodName = "/StatService/GetEventsCount"
	StatService_GetTopTasks_FullMethodName    = "/StatService/GetTopTasks"
	StatService_GetTopAuthors_FullMethodName  = "/StatService/GetTopAuthors"
)

// StatServiceClient is the client API for StatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatServiceClient interface {
	GetEventsCount(ctx context.Context, in *GetEventsCountRequest, opts ...grpc.CallOption) (*GetEventsCountResponse, error)
	GetTopTasks(ctx context.Context, in *GetTopTasksRequest, opts ...grpc.CallOption) (*GetTopTasksResponse, error)
	GetTopAuthors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTopAuthorsResponse, error)
}

type statServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatServiceClient(cc grpc.ClientConnInterface) StatServiceClient {
	return &statServiceClient{cc}
}

func (c *statServiceClient) GetEventsCount(ctx context.Context, in *GetEventsCountRequest, opts ...grpc.CallOption) (*GetEventsCountResponse, error) {
	out := new(GetEventsCountResponse)
	err := c.cc.Invoke(ctx, StatService_GetEventsCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statServiceClient) GetTopTasks(ctx context.Context, in *GetTopTasksRequest, opts ...grpc.CallOption) (*GetTopTasksResponse, error) {
	out := new(GetTopTasksResponse)
	err := c.cc.Invoke(ctx, StatService_GetTopTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statServiceClient) GetTopAuthors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTopAuthorsResponse, error) {
	out := new(GetTopAuthorsResponse)
	err := c.cc.Invoke(ctx, StatService_GetTopAuthors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatServiceServer is the server API for StatService service.
// All implementations must embed UnimplementedStatServiceServer
// for forward compatibility
type StatServiceServer interface {
	GetEventsCount(context.Context, *GetEventsCountRequest) (*GetEventsCountResponse, error)
	GetTopTasks(context.Context, *GetTopTasksRequest) (*GetTopTasksResponse, error)
	GetTopAuthors(context.Context, *emptypb.Empty) (*GetTopAuthorsResponse, error)
	mustEmbedUnimplementedStatServiceServer()
}

// UnimplementedStatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatServiceServer struct {
}

func (UnimplementedStatServiceServer) GetEventsCount(context.Context, *GetEventsCountRequest) (*GetEventsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsCount not implemented")
}
func (UnimplementedStatServiceServer) GetTopTasks(context.Context, *GetTopTasksRequest) (*GetTopTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopTasks not implemented")
}
func (UnimplementedStatServiceServer) GetTopAuthors(context.Context, *emptypb.Empty) (*GetTopAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopAuthors not implemented")
}
func (UnimplementedStatServiceServer) mustEmbedUnimplementedStatServiceServer() {}

// UnsafeStatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatServiceServer will
// result in compilation errors.
type UnsafeStatServiceServer interface {
	mustEmbedUnimplementedStatServiceServer()
}

func RegisterStatServiceServer(s grpc.ServiceRegistrar, srv StatServiceServer) {
	s.RegisterService(&StatService_ServiceDesc, srv)
}

func _StatService_GetEventsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServiceServer).GetEventsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatService_GetEventsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServiceServer).GetEventsCount(ctx, req.(*GetEventsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatService_GetTopTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServiceServer).GetTopTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatService_GetTopTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServiceServer).GetTopTasks(ctx, req.(*GetTopTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatService_GetTopAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServiceServer).GetTopAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatService_GetTopAuthors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServiceServer).GetTopAuthors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StatService_ServiceDesc is the grpc.ServiceDesc for StatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StatService",
	HandlerType: (*StatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventsCount",
			Handler:    _StatService_GetEventsCount_Handler,
		},
		{
			MethodName: "GetTopTasks",
			Handler:    _StatService_GetTopTasks_Handler,
		},
		{
			MethodName: "GetTopAuthors",
			Handler:    _StatService_GetTopAuthors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stat_service.proto",
}
